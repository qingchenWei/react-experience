{"version":3,"file":"static/js/Rudex.00702f0e.chunk.js","mappings":"4LAMMA,EAAS,WACb,IACkBC,EACdC,EAAAA,EAAAA,WADFC,aAAgBF,SAGlB,OACE,4BACE,+CACA,wBAAKA,KACL,cACEG,KAAK,UACLC,MAAO,CAAEC,OAAQ,aACjBC,QAAS,WACPL,EAAAA,EAAAA,UACEM,EAAAA,EAAAA,IAAU,CACRP,SAAU,QACVQ,SAAS,IAGd,EAVH,8CAgBL,EA0DKC,GAAWC,EAAAA,EAAAA,KACf,SAACC,GAAD,MAAY,CACVC,KAAMD,EAAMT,aADd,GAGA,CACEW,iBAAkBN,EAAAA,IALLG,EAzDH,SAACI,GASb,IAAQF,EAA2BE,EAA3BF,KAAMC,EAAqBC,EAArBD,iBACd,OACE,4BACE,SAACd,EAAD,KACA,qDACA,gDACOa,EAAKZ,SADZ,mBAC4BY,EAAKJ,QAAU,eAAO,yBAElD,cACEL,KAAK,UACLC,MAAO,CAAEC,OAAQ,aACjBC,QAAS,WACPO,EAAiB,CACfb,SAAU,cACVQ,SAAS,GAEZ,EARH,8CAcL,IAkCD,W","sources":["pages/Redux/index.jsx"],"sourcesContent":["import { Button } from \"antd\";\nimport React from \"react\";\n// import { useSelector, useDispatch, useStore } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"@/store/actions\";\nimport { store } from \"@/store/store\";\nconst Reduct = () => {\n  const {\n    loginReducer: { userName },\n  } = store.getState();\n\n  return (\n    <div>\n      <h3>redux实现</h3>\n      <h4>{userName}</h4>\n      <Button\n        type=\"primary\"\n        style={{ margin: \"40px 20px\" }}\n        onClick={() => {\n          store.dispatch(\n            loginUser({\n              userName: \"redux\",\n              isLogin: true,\n            })\n          );\n        }}\n      >\n        更改用户名\n      </Button>\n    </div>\n  );\n};\nconst Index = (props) => {\n  //直接使用useSelector,可以不用去手动更新 react-redux帮你完成了\n  // const { userName } = useSelector((state) => state.loginReducer);\n  // redux中，当store数据更新后，界面数据并不会直接更新，需要手动更新\n  // // const store = useStore();\n  // const dispatch = useDispatch();\n\n  // 初始化一个update数据使用useState()，主要是为了通过setUpdate()来更新组件\n  // 模拟render()生命周期，实现组件重新加载，以更新界面的store数据\n  const { user, dispathloginUser } = props;\n  return (\n    <div>\n      <Reduct />\n      <h3>react-redux实现</h3>\n      <h4>\n        用户名:{user.userName}--状态: {user.isLogin ? \"登陆\" : \"未登陆\"}\n      </h4>\n      <Button\n        type=\"primary\"\n        style={{ margin: \"40px 20px\" }}\n        onClick={() => {\n          dispathloginUser({\n            userName: \"react-redux\",\n            isLogin: true,\n          });\n        }}\n      >\n        更改用户名\n      </Button>\n    </div>\n  );\n};\n//mapStateToProps基础写法\n// const mapStateToProps = (state) => {\n//   const { userName, isLogin } = state.loginReducer;\n//   return {\n//     userName,\n//     isLogin,\n//   };\n// };\n//mapStateToProps简写\n// const mapStateToProps = (state) => ({\n//   user: state.loginReducer,\n// });\n//mapDispatchToProps基础写法\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     dispathloginUser: (data) => dispatch(loginUser(data)),\n//   };\n// };\n// mapDispatchToProps 简写;\n// const mapDispatchToProps = {\n//   dispathloginUser: loginUser,\n// };\n// 基础写法;\n// const IndexCom = connect(mapStateToProps, mapDispatchToProps)(Index);\n// 简化\nconst IndexCom = connect(\n  (state) => ({\n    user: state.loginReducer,\n  }),\n  {\n    dispathloginUser: loginUser,\n  }\n)(Index);\nexport default IndexCom;\n"],"names":["Reduct","userName","store","loginReducer","type","style","margin","onClick","loginUser","isLogin","IndexCom","connect","state","user","dispathloginUser","props"],"sourceRoot":""}